filter:
    tf:                  
        broadcast: true # flag to publish TF
        frames: ["ship_base_link", "null", "ship_map", "ship_map"] # base_link, odom, map, world
    kalman_filter:
        # reset filter if no measurement is received for a certain period (any measurement). 0 for no reset
        reset_period: 0 
        
        # predict period
        predict_period: 0.1

        # Buffer for saving measurements while usbl fix is not received.
        save_measurement_interval: 5

        # outlier rejection threshold
        outlier_rejection_threshold: 15

        # process noise for position, velocity, angles, angle rate, acceleration, altitude
        process_covariance: [1.0, 0.1, 0.1, 0.1, 0.1, 0.1]   

        # outlier reject counters for position, velocity, angle, angle rate, acceleration, altitude  
        reject_counter:     [8, 200, 12, 4, 7, 6]              

        # ahrs an input(true) or measurement (false)
        bypass_ahrs: true 

        # If no frame_id ("" or "null"), the filter is initialized with the values defined here.
        # If a frame_id is given ("gnss") the initial position of the filter comes from the sensor.
        # Filter won't work without a initial position
        manually_initialization:
                frame_id: "ship_gnss"
                value: [4290824.44, 491916.60, 0,    # Position - x, y, z
                        0.0, 0, 0,                   # Velocity - dx, dy, dz
                        0, 0, 0,                     # Orientation - r, p, ya
                        0, 0, 0,                     # Orientation Rate - dr, dp, dya
                        0, 0, 0.5]                   # Acceleration & Altitude - ax, ay, A
                noise: [1.0, 1.0, 0.01,              # Set the intial state covariance here
                        0.001 , 0.001 , 0.01 ,
                        0.02   , 0.03   , 0.04,
                        0.01 , 0.01 , 0.01 ,
                        0.0, 0.0, 0.01]
        sensors:
            -   frame_id:   "ship_gnss"
                config:     "Hposition"            # [x, y]
                noise:      [0.001, 0.001]         # if you want to use the noise directly from the sensor, fill the noise with zeros
                outlier_tolerance: 0.2
                reject_counter: 8
            -   frame_id:   "ship_usbl"
                config:     "Hposition"            # [x, y]
                noise:      [1, 1]
                outlier_tolerance: 1.0
                reject_counter: 10
                outlier_increase: 0.3              # value that we assume that will increase over time (0.3m/s)
            -   frame_id:   "ship_ahrs"  
                config:     "orientation"          
                noise:      [0.001, 0.001, 0.001,  # [roll, pitch, yaw]
                            1.0, 1.0, 1.0]         # roll_rate, picth_rate, yaw_rate]
                outlier_tolerance: 0.5
                reject_counter: 12

    dvl:
      body_frame: false  # If dvl values are in inercial frame, you need to put false here!!!

usbl2pos:
    t_sync: 2
    # false, vehicle acts as an achor, estimates other vehicles position 
    # true, vehicle estimates its own position with respect to an anchor    
    fix_type: false
    meas_noise: 0.001